// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package forest

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeGittrainForest(in *jlexer.Lexer, out *Forest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name1":
			out.Name1 = string(in.String())
		case "Rio1":
			if in.IsNull() {
				in.Skip()
				out.Rio1 = nil
			} else {
				in.Delim('[')
				if out.Rio1 == nil {
					if !in.IsDelim(']') {
						out.Rio1 = make([]string, 0, 4)
					} else {
						out.Rio1 = []string{}
					}
				} else {
					out.Rio1 = (out.Rio1)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Rio1 = append(out.Rio1, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name2":
			out.Name2 = string(in.String())
		case "Rio2":
			if in.IsNull() {
				in.Skip()
				out.Rio2 = nil
			} else {
				in.Delim('[')
				if out.Rio2 == nil {
					if !in.IsDelim(']') {
						out.Rio2 = make([]string, 0, 4)
					} else {
						out.Rio2 = []string{}
					}
				} else {
					out.Rio2 = (out.Rio2)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Rio2 = append(out.Rio2, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name3":
			out.Name3 = string(in.String())
		case "Rio3":
			if in.IsNull() {
				in.Skip()
				out.Rio3 = nil
			} else {
				in.Delim('[')
				if out.Rio3 == nil {
					if !in.IsDelim(']') {
						out.Rio3 = make([]string, 0, 4)
					} else {
						out.Rio3 = []string{}
					}
				} else {
					out.Rio3 = (out.Rio3)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Rio3 = append(out.Rio3, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name4":
			out.Name4 = string(in.String())
		case "Rio4":
			if in.IsNull() {
				in.Skip()
				out.Rio4 = nil
			} else {
				in.Delim('[')
				if out.Rio4 == nil {
					if !in.IsDelim(']') {
						out.Rio4 = make([]string, 0, 4)
					} else {
						out.Rio4 = []string{}
					}
				} else {
					out.Rio4 = (out.Rio4)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Rio4 = append(out.Rio4, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name5":
			out.Name5 = string(in.String())
		case "Rio5":
			if in.IsNull() {
				in.Skip()
				out.Rio5 = nil
			} else {
				in.Delim('[')
				if out.Rio5 == nil {
					if !in.IsDelim(']') {
						out.Rio5 = make([]string, 0, 4)
					} else {
						out.Rio5 = []string{}
					}
				} else {
					out.Rio5 = (out.Rio5)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Rio5 = append(out.Rio5, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGittrainForest(out *jwriter.Writer, in Forest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name1\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name1))
	}
	{
		const prefix string = ",\"Rio1\":"
		out.RawString(prefix)
		if in.Rio1 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Rio1 {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name2\":"
		out.RawString(prefix)
		out.String(string(in.Name2))
	}
	{
		const prefix string = ",\"Rio2\":"
		out.RawString(prefix)
		if in.Rio2 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Rio2 {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name3\":"
		out.RawString(prefix)
		out.String(string(in.Name3))
	}
	{
		const prefix string = ",\"Rio3\":"
		out.RawString(prefix)
		if in.Rio3 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Rio3 {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name4\":"
		out.RawString(prefix)
		out.String(string(in.Name4))
	}
	{
		const prefix string = ",\"Rio4\":"
		out.RawString(prefix)
		if in.Rio4 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Rio4 {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name5\":"
		out.RawString(prefix)
		out.String(string(in.Name5))
	}
	{
		const prefix string = ",\"Rio5\":"
		out.RawString(prefix)
		if in.Rio5 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Rio5 {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Forest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGittrainForest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Forest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGittrainForest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Forest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGittrainForest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Forest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGittrainForest(l, v)
}
